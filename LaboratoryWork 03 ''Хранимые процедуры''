--I. Хранимые процедуры
--1. Хранимая процедура выводит «Hello, world!».
CREATE PROCEDURE HelloWorld
AS
BEGIN
    SELECT 'Hello, world!'
END
-- 2. Хранимая процедура возвращает информацию о текущем времени.
CREATE PROCEDURE CurrentTime
AS
BEGIN
    SELECT CONVERT (time, SYSDATETIME())
END
-- 3. Хранимая процедура возвращает информацию о текущей дате.
CREATE PROCEDURE CurrentDate
AS
BEGIN
    SELECT CONVERT (date, SYSDATETIME())
END
-- 4. Хранимая процедура принимает три числа и возвращает их сумму.
CREATE PROCEDURE Summa (
    @num1 INT,
    @num2 INT,
    @num3 INT
)
AS
BEGIN
    RETURN @num1 + @num2 + @num3;
END
-- 5. Хранимая процедура принимает три числа и возвращает среднеарифметическое трёх чисел.
CREATE PROCEDURE Average (
    @num1 INT,
    @num2 INT,
    @num3 INT
)
AS
BEGIN
    RETURN (@num1 + @num2 + @num3) / 3;
END
-- 6. Хранимая процедура принимает три числа и возвращает максимальное значение.
CREATE PROCEDURE Max (
    @num1 INT,
    @num2 INT,
    @num3 INT
)
AS
BEGIN
    RETURN CASE WHEN @num1 < @num3 AND @num2 < @num3 
    THEN @num3 ELSE 
        CASE WHEN @num1 < @num2 
        THEN @num2 ELSE 
        @num1
        END 
    END;
END
-- 7. Хранимая процедура принимает три числа и возвращает минимальное значение.
CREATE PROCEDURE Min (
    @num1 INT,
    @num2 INT,
    @num3 INT
)
AS
BEGIN
    RETURN CASE WHEN @num1 .> @num3 AND @num2 > @num3 
    THEN @num3 ELSE 
        CASE WHEN @num1 > @num2 
        THEN @num2 ELSE 
        @num1
        END 
    END;
END
-- 8. Хранимая процедура принимает число и символ. В результате работы хранимой процедуры отображается линия длиной равной числу. Линия построена из символа, указанного во втором параметре. Например, если было передано 5 и #, мы получим линию такого вида #####.
CREATE PROCEDURE DisplayLine (
    @number INT,
    @symbol NVARCHAR(1)
)
AS
BEGIN
    DECLARE @line NVARCHAR(MAX)
    SET @line = REPLICATE(@symbol, @number)
    PRINT @line
END
-- 9. Хранимая процедура принимает в качестве параметра число и возвращает его факториал. Формула расчёта факториала: n! = 1*2*…n. Например, 3! = 1*2*3 = 6.
CREATE PROCEDURE CalculateFactorial (
    @number INT,
    @factorial INT OUTPUT
)
AS
BEGIN
    SET @factorial = 1
    DECLARE @i INT
    SET @i = 1
    WHILE (@i <= @number)
    BEGIN
        SET @factorial = @factorial * @i
        SET @i = @i + 1
    END
END
-- 10. Хранимая принимает два числовых параметра. Первый параметр – это число. Второй параметр – это степень. Процедура возвращает число, возведённое в степень. Например, если параметры равны 2 и 3, тогда вернётся 2 в третьей степени, то есть 8.
CREATE PROCEDURE CalculatePower (
    @number FLOAT,
    @power INT,
    @result FLOAT OUTPUT
)
AS
BEGIN
    SET @result = POWER(@number, @power)
END
--II. Хранимые процедуры для базы данных «Продажи»
--1. Хранимая процедура показывает информацию о всех продавцах.
CREATE PROCEDURE ShowAllSalesmen
AS
BEGIN
    SELECT * FROM Salesman
END
-- 2. Хранимая процедура показывает информацию о всех покупателях.
CREATE PROCEDURE ShowAllBuyers
AS
BEGIN
    SELECT * FROM Buyer
END
-- 3. Хранимая процедура показывает полную информацию о продажах.
CREATE PROCEDURE ShowAllSales
AS
BEGIN
    SELECT s.Id, s.ProductName, s.Price, s.DateSale, sa.Surname AS SalesmanSurname, sa.Name AS SalesmanName, sa.Patronymic AS SalesmanPatronymic, b.Surname AS BuyerSurname, b.Name AS BuyerName, b.Patronymic AS BuyerPatronymic
    FROM Sale s
    INNER JOIN Salesman sa ON s.SalesmanId = sa.Id
    INNER JOIN Buyer b ON s.BuyerId = b.Id
END
-- 4. Хранимая процедура показывает полную информацию о всех продажах в конкретный день. Дата продажи передаётся в качестве параметра.
CREATE PROCEDURE ShowSalesByDate(
    @SaleDate DATE
)
AS
BEGIN
    SELECT s.Id, s.ProductName, s.Price, s.DateSale, sa.Surname AS SalesmanSurname, sa.Name AS SalesmanName, sa.Patronymic AS SalesmanPatronymic, b.Surname AS BuyerSurname, b.Name AS BuyerName, b.Patronymic AS BuyerPatronymic
    FROM Sale s
    INNER JOIN Salesman sa ON s.SalesmanId = sa.Id
    INNER JOIN Buyer b ON s.BuyerId = b.Id
    WHERE s.DateSale = @SaleDate
END
-- 5. Хранимая процедура показывает полную информацию о всех продажах в некотором временном сегменте. Дата старта и конца сегмента передаётся в качестве параметра.
CREATE PROCEDURE ShowSalesByTimeSegment(
    @StartDate DATE,
    @EndDate DATE
)
AS
BEGIN
    SELECT s.Id, s.ProductName, s.Price, s.DateSale, sa.Surname AS SalesmanSurname, sa.Name AS SalesmanName, sa.Patronymic AS SalesmanPatronymic, b.Surname AS BuyerSurname, b.Name AS BuyerName, b.Patronymic AS BuyerPatronymic
    FROM Sale s
    INNER JOIN Salesman sa ON s.SalesmanId = sa.Id
    INNER JOIN Buyer b ON s.BuyerId = b.Id
    WHERE s.DateSale >= @StartDate AND s.DateSale <= @EndDate
END
-- 6. Хранимая процедура отображает информацию о продажах конкретного продавца. ФИО продавца передаётся в качестве параметра хранимой процедуры.
CREATE PROCEDURE ShowSalesBySalesman(
    @SalesmanName NVARCHAR(MAX)
)
AS
BEGIN
    SELECT s.Id, s.ProductName, s.Price, s.DateSale, sa.Surname AS SalesmanSurname, sa.Name AS SalesmanName, sa.Patronymic AS SalesmanPatronymic, b.Surname AS BuyerSurname, b.Name AS BuyerName, b.Patronymic AS BuyerPatronymic
    FROM Sale s
    INNER JOIN Salesman sa ON s.SalesmanId = sa.Id
    INNER JOIN Buyer b ON s.BuyerId = b.Id
    WHERE sa.Name = @SalesmanName
END
-- 7. Хранимая процедура возвращает среднеарифметическую цену продажи в конкретный год. Год передаётся в качестве параметра.
CREATE PROCEDURE GetAveragePriceByYear(
    @Year INT
)
AS
BEGIN
    SELECT AVG(Price) AS AveragePrice
    FROM Sale
    WHERE YEAR(DateSale) = @Year
END
